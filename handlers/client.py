from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
from keyboards import kb_client, kb_cancel
from create_bot import db
from scripts import WakatimeAPI
from os import getenv


class Auth(StatesGroup):
    code = State()


async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç StatsWakaTime, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–∞–π—Ç–∞ WakaTime.com",
        reply_markup=await kb_client(await db.userExsist(message.from_id)),
    )


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "‚ùó –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await kb_client(await db.userExsist(message.from_id)),
    )


async def auth_step(message: types.Message, state: FSMContext):
    await Auth.code.set()
    await state.update_data(user_id=message.from_user.id)
    auth_url = WakatimeAPI(
        client_id=getenv("CLIENT_ID"), client_secret=getenv("SECRET")
    ).get_url_auth()
    await message.answer(
        "–ß—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ—Å—Å—ã–ª–∫–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω " + auth_url,
        reply_markup=kb_cancel,
    )


async def res_step(message: types.Message, state: FSMContext):
    msg = await message.answer("‚åõ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚åõ")
    await state.update_data(code=message.text)
    api = WakatimeAPI(client_id=getenv("CLIENT_ID"), client_secret=getenv("SECRET"))
    user_data = await state.get_data()
    if api.set_auth_session(user_data["code"]):
        refresh_token = api.get_refresh_token()
        await db.userAdd(user_data["user_id"], refresh_token)
        await msg.edit_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        await message.answer(
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üëá",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    else:
        await msg.edit_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        await message.answer(
            "‚ùó –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    await state.finish()


async def cmd_exit(message: types.Message):
    if not await db.userExsist(message.from_user.id):
        await message.answer(
            f"‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    else:
        await db.userDel(message.from_user.id)
        await message.answer(
            "‚ùó –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands="start")
    dp.register_message_handler(cmd_cancel, commands="–û—Ç–º–µ–Ω–∞", state="*")
    dp.register_message_handler(
        cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*"
    )
    dp.register_message_handler(auth_step, Text(equals="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"), state="*")
    dp.register_message_handler(
        res_step, state=Auth.code, content_types=types.ContentTypes.TEXT
    )
    dp.register_message_handler(cmd_exit, Text(equals="–í—ã—Ö–æ–¥"))
