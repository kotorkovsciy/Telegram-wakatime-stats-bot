from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
from keyboards import kb_client, kb_cancel
from create_bot import db
from scripts import acc_verify


class Auth(StatesGroup):
    user_id = State()
    email = State()
    password = State()


async def cmd_start(message: types.Message):
    await message.answer(f"Hello", reply_markup=await kb_client(await db.userExsist(message.from_id)))


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùó –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await kb_client(await db.userExsist(message.from_id)))


async def auth_step(message: types.Message, state: FSMContext):
    await Auth.user_id.set()
    await state.update_data(user_id=message.from_user.id)
    await Auth.email.set()
    await message.answer("üì¨ –í–≤–µ–¥–∏—Ç–µ email", reply_markup=kb_cancel)


async def pass_step(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await Auth.password.set()
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=kb_cancel)


async def res_step(message: types.Message, state: FSMContext):
    msg = await message.answer("‚åõ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚åõ")
    await state.update_data(password=message.text)
    user_data = await state.get_data()
    if await acc_verify(user_data["email"], user_data["password"]):
        await db.userAdd(user_data["user_id"], user_data["email"], user_data["password"])
        await msg.edit_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üëá", reply_markup=await kb_client(await db.userExsist(message.from_id)))
    else:
        await message.edit_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        await message.answer("‚ùó –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ", reply_markup=await kb_client(await db.userExsist(message.from_id)))
    await state.finish()


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands='start')
    dp.register_message_handler(cmd_cancel, commands="–û—Ç–º–µ–Ω–∞", state="*")
    dp.register_message_handler(cmd_cancel, Text(
        equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(
        auth_step, Text(equals='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'), state="*")
    dp.register_message_handler(
        pass_step, state=Auth.email, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(
        res_step, state=Auth.password, content_types=types.ContentTypes.TEXT)
